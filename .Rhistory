rep=1, # proportion reported
export=0) #
theta[["beta"]]=r0*theta[["gamma"]]
initial_inf=1
theta_init = c(n_init=theta[["npop1"]], s_init=NA,i1_init=initial_inf,r_init=0,n2_init=theta[["npop2"]], s2_init=NA,i2_init=0,r2_init=0)
theta_init[["s_init"]]= (theta_init[["n_init"]]-theta_init[["i1_init"]])/2
theta_init[["s2_init"]]=theta_init[["n2_init"]]-theta_init[["i2_init"]]
output_sim<-Run_simulation(dt,theta,theta_init,time.vals)
plot(time.vals,output_sim$C1_trace,type="l",col='blue',xlab="days",ylab="cases",ylim=c(0,5000))
lines(time.vals,output_sim$C2_trace,col='red')
dev.copy(pdf,paste("plots/SIR_model.pdf",sep=""),width=8,height=6)
dev.off()
# Proportion infected
100*(1-tail(output_sim$S_trace,1)/theta[["npop1"]])
# Set initial conditions
r0=3
# Set initial parameters
theta = c(beta=NA,gamma=1/10,alpha=0.0,npop1=popsize,npop2=popsize,
rep=1, # proportion reported
export=0) #
theta[["beta"]]=r0*theta[["gamma"]]
initial_inf=1
theta_init = c(n_init=theta[["npop1"]], s_init=NA,i1_init=initial_inf,r_init=0,n2_init=theta[["npop2"]], s2_init=NA,i2_init=0,r2_init=0)
theta_init[["s_init"]]= (theta_init[["n_init"]]-theta_init[["i1_init"]])
theta_init[["s2_init"]]=theta_init[["n2_init"]]-theta_init[["i2_init"]]
output_sim<-Run_simulation(dt,theta,theta_init,time.vals)
plot(time.vals,output_sim$C1_trace,type="l",col='blue',xlab="days",ylab="cases",ylim=c(0,5000))
lines(time.vals,output_sim$C2_trace,col='red')
dev.copy(pdf,paste("plots/SIR_model.pdf",sep=""),width=8,height=6)
dev.off()
# Set initial conditions
r0=6
# Set initial parameters
theta = c(beta=NA,gamma=1/10,alpha=0.0,npop1=popsize,npop2=popsize,
rep=1, # proportion reported
export=0) #
theta[["beta"]]=r0*theta[["gamma"]]
initial_inf=1
theta_init = c(n_init=theta[["npop1"]], s_init=NA,i1_init=initial_inf,r_init=0,n2_init=theta[["npop2"]], s2_init=NA,i2_init=0,r2_init=0)
theta_init[["s_init"]]= (theta_init[["n_init"]]/2-theta_init[["i1_init"]])
theta_init[["s2_init"]]=theta_init[["n2_init"]]-theta_init[["i2_init"]]
output_sim<-Run_simulation(dt,theta,theta_init,time.vals)
plot(time.vals,output_sim$C1_trace,type="l",col='blue',xlab="days",ylab="cases",ylim=c(0,5000))
lines(time.vals,output_sim$C2_trace,col='red')
dev.copy(pdf,paste("plots/SIR_model2.pdf",sep=""),width=8,height=6)
dev.off()
# Set initial conditions
r0=6
# Set initial parameters
theta = c(beta=NA,gamma=1/10,alpha=0.0,npop1=popsize,npop2=popsize,
rep=1, # proportion reported
export=0) #
theta[["beta"]]=r0*theta[["gamma"]]
initial_inf=2
theta_init = c(n_init=theta[["npop1"]], s_init=NA,i1_init=initial_inf,r_init=0,n2_init=theta[["npop2"]], s2_init=NA,i2_init=0,r2_init=0)
theta_init[["s_init"]]= (theta_init[["n_init"]]/2-theta_init[["i1_init"]])
theta_init[["s2_init"]]=theta_init[["n2_init"]]-theta_init[["i2_init"]]
output_sim<-Run_simulation(dt,theta,theta_init,time.vals)
plot(time.vals,output_sim$C1_trace,type="l",col='blue',xlab="days",ylab="cases",ylim=c(0,5000))
lines(time.vals,output_sim$C2_trace,col='red')
dev.copy(pdf,paste("plots/SIR_model2.pdf",sep=""),width=8,height=6)
dev.off()
# Set initial conditions
r0=8
# Set initial parameters
theta = c(beta=NA,gamma=1/10,alpha=0.0,npop1=popsize,npop2=popsize,
rep=1, # proportion reported
export=0) #
theta[["beta"]]=r0*theta[["gamma"]]
initial_inf=1
theta_init = c(n_init=theta[["npop1"]], s_init=NA,i1_init=initial_inf,r_init=0,n2_init=theta[["npop2"]], s2_init=NA,i2_init=0,r2_init=0)
theta_init[["s_init"]]= (theta_init[["n_init"]]/2-theta_init[["i1_init"]])
theta_init[["s2_init"]]=theta_init[["n2_init"]]-theta_init[["i2_init"]]
output_sim<-Run_simulation(dt,theta,theta_init,time.vals)
plot(time.vals,output_sim$C1_trace,type="l",col='blue',xlab="days",ylab="cases",ylim=c(0,5000))
lines(time.vals,output_sim$C2_trace,col='red')
dev.copy(pdf,paste("plots/SIR_model2.pdf",sep=""),width=8,height=6)
dev.off()
# Set initial conditions
r0=6
# Set initial parameters
theta = c(beta=NA,gamma=1/10,alpha=0.0,npop1=popsize,npop2=popsize,
rep=1, # proportion reported
export=0) #
theta[["beta"]]=r0*theta[["gamma"]]
initial_inf=1
theta_init = c(n_init=theta[["npop1"]], s_init=NA,i1_init=initial_inf,r_init=0,n2_init=theta[["npop2"]], s2_init=NA,i2_init=0,r2_init=0)
theta_init[["s_init"]]= (theta_init[["n_init"]]/2-theta_init[["i1_init"]])
theta_init[["s2_init"]]=theta_init[["n2_init"]]-theta_init[["i2_init"]]
output_sim<-Run_simulation(dt,theta,theta_init,time.vals)
plot(time.vals,output_sim$C1_trace,type="l",col='blue',xlab="days",ylab="cases",ylim=c(0,5000))
lines(time.vals,output_sim$C2_trace,col='red')
dev.copy(pdf,paste("plots/SIR_model2.pdf",sep=""),width=8,height=6)
dev.off()
# Set initial conditions
r0=3
# Set initial parameters
theta = c(beta=NA,gamma=1/10,alpha=0.0,npop1=popsize,npop2=popsize,
rep=0.5, # proportion reported
export=0) #
theta[["beta"]]=r0*theta[["gamma"]]
initial_inf=1
theta_init = c(n_init=theta[["npop1"]], s_init=NA,i1_init=initial_inf,r_init=0,n2_init=theta[["npop2"]], s2_init=NA,i2_init=0,r2_init=0)
theta_init[["s_init"]]= (theta_init[["n_init"]]-theta_init[["i1_init"]])
theta_init[["s2_init"]]=theta_init[["n2_init"]]-theta_init[["i2_init"]]
output_sim<-Run_simulation(dt,theta,theta_init,time.vals)
plot(time.vals,output_sim$C1_trace,type="l",col='blue',xlab="days",ylab="cases",ylim=c(0,5000))
lines(time.vals,output_sim$C2_trace,col='red')
dev.copy(pdf,paste("plots/SIR_model2.pdf",sep=""),width=8,height=6)
dev.off()
# Set initial conditions
r0=3
# Set initial parameters
theta = c(beta=NA,gamma=1/10,alpha=0.0,npop1=popsize,npop2=popsize,
rep=0.1, # proportion reported
export=0) #
theta[["beta"]]=r0*theta[["gamma"]]
initial_inf=1
theta_init = c(n_init=theta[["npop1"]], s_init=NA,i1_init=initial_inf,r_init=0,n2_init=theta[["npop2"]], s2_init=NA,i2_init=0,r2_init=0)
theta_init[["s_init"]]= (theta_init[["n_init"]]-theta_init[["i1_init"]])
theta_init[["s2_init"]]=theta_init[["n2_init"]]-theta_init[["i2_init"]]
output_sim<-Run_simulation(dt,theta,theta_init,time.vals)
plot(time.vals,output_sim$C1_trace,type="l",col='blue',xlab="days",ylab="cases",ylim=c(0,1000))
lines(time.vals,output_sim$C2_trace,col='red')
dev.copy(pdf,paste("plots/SIR_model.pdf",sep=""),width=8,height=6)
dev.off()
# Set initial conditions
r0=3
# Set initial parameters
theta = c(beta=NA,gamma=1/10,alpha=0.0,npop1=popsize,npop2=popsize,
rep=0.1, # proportion reported
export=0) #
theta[["beta"]]=r0*theta[["gamma"]]
initial_inf=1
theta_init = c(n_init=theta[["npop1"]], s_init=NA,i1_init=initial_inf,r_init=0,n2_init=theta[["npop2"]], s2_init=NA,i2_init=0,r2_init=0)
theta_init[["s_init"]]= (theta_init[["n_init"]]-theta_init[["i1_init"]])
theta_init[["s2_init"]]=theta_init[["n2_init"]]-theta_init[["i2_init"]]
output_sim<-Run_simulation(dt,theta,theta_init,time.vals)
plot(time.vals,output_sim$C1_trace,type="l",col='blue',xlab="days",ylab="cases",ylim=c(0,500))
lines(time.vals,output_sim$C2_trace,col='red')
dev.copy(pdf,paste("plots/SIR_model.pdf",sep=""),width=8,height=6)
dev.off()
# Proportion infected
100*(1-tail(output_sim$S_trace,1)/theta[["npop1"]])
# Proportion infected
100*(1-tail(output_sim$S_trace,1)/theta[["npop1"]])
for(ii in 1:2){
# Set initial conditions
if(ii==1){r0=3; initial_inf=1; rep_p=0.1; s_frac=1}
if(ii==2){r0=6; initial_inf=1; rep_p=0.2; s_frac=0.5}
# Set initial parameters
theta = c(beta=NA,gamma=1/10,alpha=0.0,npop1=popsize,npop2=popsize,
rep=rep_p, # proportion reported
export=0) #
theta[["beta"]]=r0*theta[["gamma"]]
theta_init = c(n_init=theta[["npop1"]], s_init=NA,i1_init=initial_inf,r_init=0,n2_init=theta[["npop2"]], s2_init=NA,i2_init=0,r2_init=0)
theta_init[["s_init"]]= (theta_init[["n_init"]]*s_frac-theta_init[["i1_init"]])
theta_init[["s2_init"]]=theta_init[["n2_init"]]-theta_init[["i2_init"]]
output_sim<-Run_simulation(dt,theta,theta_init,time.vals)
plot(time.vals,output_sim$C1_trace,type="l",col='blue',xlab="days",ylab="cases",ylim=c(0,500))
dev.copy(pdf,paste("plots/SIR_model",ii,".pdf",sep=""),width=8,height=6)
dev.off()
# Proportion infected
100*(1-tail(output_sim$S_trace,1)/theta[["npop1"]])
}
for(ii in 1:2){
# Set initial conditions
if(ii==1){r0=3; initial_inf=2; rep_p=0.1; s_frac=1}
if(ii==2){r0=6; initial_inf=1; rep_p=0.2; s_frac=0.5}
# Set initial parameters
theta = c(beta=NA,gamma=1/10,alpha=0.0,npop1=popsize,npop2=popsize,
rep=rep_p, # proportion reported
export=0) #
theta[["beta"]]=r0*theta[["gamma"]]
theta_init = c(n_init=theta[["npop1"]], s_init=NA,i1_init=initial_inf,r_init=0,n2_init=theta[["npop2"]], s2_init=NA,i2_init=0,r2_init=0)
theta_init[["s_init"]]= (theta_init[["n_init"]]*s_frac-theta_init[["i1_init"]])
theta_init[["s2_init"]]=theta_init[["n2_init"]]-theta_init[["i2_init"]]
output_sim<-Run_simulation(dt,theta,theta_init,time.vals)
plot(time.vals,output_sim$C1_trace,type="l",col='blue',xlab="days",ylab="cases",ylim=c(0,500))
dev.copy(pdf,paste("plots/SIR_model",ii,".pdf",sep=""),width=8,height=6)
dev.off()
# Proportion infected
100*(1-tail(output_sim$S_trace,1)/theta[["npop1"]])
}
100*(1-tail(output_sim$S_trace,1)/theta[["npop1"]])
for(ii in 1:2){
# Set initial conditions
if(ii==1){r0=3; initial_inf=2; rep_p=0.1; s_frac=1}
if(ii==2){r0=6; initial_inf=1; rep_p=0.2; s_frac=0.5}
# Set initial parameters
theta = c(beta=NA,gamma=1/10,alpha=0.0,npop1=popsize,npop2=popsize,
rep=rep_p, # proportion reported
export=0) #
theta[["beta"]]=r0*theta[["gamma"]]
theta_init = c(n_init=theta[["npop1"]], s_init=NA,i1_init=initial_inf,r_init=0,n2_init=theta[["npop2"]], s2_init=NA,i2_init=0,r2_init=0)
theta_init[["s_init"]]= (theta_init[["n_init"]]*s_frac-theta_init[["i1_init"]])
theta_init[["s2_init"]]=theta_init[["n2_init"]]-theta_init[["i2_init"]]
output_sim<-Run_simulation(dt,theta,theta_init,time.vals)
plot(time.vals,output_sim$C1_trace,type="l",col='blue',xlab="days",ylab="cases",ylim=c(0,500))
dev.copy(pdf,paste("plots/SIR_model",ii,".pdf",sep=""),width=8,height=6)
dev.off()
# Proportion infected
print(100*(1-tail(output_sim$S_trace,1)/theta[["npop1"]]))
}
# - - - - - - - - - - - - - - - - -
# Analysis functions for model of isolation, contact tracing, and physical distancing
# Adam Kucharski (2020)
# https://github.com/adamkucharski/2020-cov-tracing
# - - - - - - - - - - - - - - - - -
library(dplyr)
library(tibble)
library(readr)
library(magrittr)
library(igraph)
library(doMC)
registerDoMC(4)  #change the 4 to your number of CPU cores
# Set local path ----------------------------------------------
# setwd("~/Documents/GitHub/2020-cov-tracing/")
wdir <- getwd()
out_dir <- paste0(wdir,"/outputs/") # Set data output path
# Create output directories if don't exist
subdir_list <- c("runs","runs2","sensitivity","rr_out")
for(ii in 1:length(subdir_list)){
ifelse(!dir.exists(paste0(out_dir, subdir_list[ii])), dir.create(file.path(out_dir, subdir_list[ii])), FALSE)
}
# Load contact data ----------------------------------------------
data_user_col_red_u18 <- read_csv("data/contact_distributions_u18.csv")
data_user_col_red_o18 <- read_csv("data/contact_distributions_o18.csv")
n_user_u18 <- nrow(data_user_col_red_u18)
n_user_o18 <- nrow(data_user_col_red_o18)
# Run simulation model ----------------------------------------------
# For each function, outputs are saved in 'dir_pick' directory.
n_run_pick <- 1e4 # model iterations
set.seed(201)
# Load model functions
source("R/model_functions.R")
# - - - - - -
# MAIN FIGURES
# - - - - - -
# - - - - - -
# Baseline case (Table 3 and 4):
#offspring_model(n_run = n_run_pick, range_n = c(1:13), dir_pick = out_dir,output_r = T)
#table_outputs_1(dir_pick = out_dir)
limit_range <- round(10^seq(0,2,0.25))
limit_range
# Iterate over different limits on contacts and with/without limit on children
limit_range <- round(seq(1,10,1))
limit_range
# Iterate over different limits on contacts and with/without limit on children
limit_range <- round(seq(1,10,1))
foreach(ii = limit_range) %dopar% {
offspring_model(max_low_fix = ii,
range_n = c(5,6),
wfh_prob=0,
n_run = n_run_pick,
pre_inf = 2, # Pre-infectious period
trace_prop = 0.9, # Proportion of contacts traced
test_delay = 2, # Delay to tracing
trace_delay = 2, # Delay to tracing
p_tested = 0.8, # Probability index case isolated/tested
trace_adherence = 0.8, # Adherence of traced contacts to quarantine
dir_pick = paste0(out_dir,"runs_contacts/"))
}
# Run simulation model ----------------------------------------------
# For each function, outputs are saved in 'dir_pick' directory.
n_run_pick <- 1e4 # model iterations
set.seed(201)
# Load model functions
source("R/model_functions.R")
setwd("~/Documents/GitHub/2020-cov-tracing/")
wdir <- getwd()
out_dir <- paste0(wdir,"/outputs/") # Set data output path
# Create output directories if don't exist
subdir_list <- c("runs","runs2","sensitivity","rr_out")
for(ii in 1:length(subdir_list)){
ifelse(!dir.exists(paste0(out_dir, subdir_list[ii])), dir.create(file.path(out_dir, subdir_list[ii])), FALSE)
}
# Load contact data ----------------------------------------------
data_user_col_red_u18 <- read_csv("data/contact_distributions_u18.csv")
data_user_col_red_o18 <- read_csv("data/contact_distributions_o18.csv")
n_user_u18 <- nrow(data_user_col_red_u18)
n_user_o18 <- nrow(data_user_col_red_o18)
# Run simulation model ----------------------------------------------
# For each function, outputs are saved in 'dir_pick' directory.
n_run_pick <- 1e4 # model iterations
set.seed(201)
# Load model functions
source("R/model_functions.R")
# - - - - - -
# Iterate over different limits on contacts and with/without limit on children
limit_range <- round(seq(1,10,1))
foreach(ii = limit_range) %dopar% {
offspring_model(max_low_fix = ii,
range_n = c(5,6),
wfh_prob=0,
n_run = n_run_pick,
pre_inf = 2, # Pre-infectious period
trace_prop = 0.9, # Proportion of contacts traced
test_delay = 2, # Delay to tracing
trace_delay = 2, # Delay to tracing
p_tested = 0.8, # Probability index case isolated/tested
trace_adherence = 0.8, # Adherence of traced contacts to quarantine
dir_pick = paste0(out_dir,"runs_contacts/"))
}
data_user_col_red_u18 <- read_csv("data/contact_distributions_u18.csv")
data_user_col_red_o18 <- read_csv("data/contact_distributions_o18.csv")
n_user_u18 <- nrow(data_user_col_red_u18)
n_user_o18 <- nrow(data_user_col_red_o18)
# Run simulation model ----------------------------------------------
# For each function, outputs are saved in 'dir_pick' directory.
n_run_pick <- 1e4 # model iterations
set.seed(201)
# Load model functions
source("R/model_functions.R")
ii=1
jj=1
offspring_model(max_low_fix = ii,
max_lim_children=jj,
range_n = c(5,6),
wfh_prob=0,
n_run = n_run_pick,
pre_inf = 2, # Pre-infectious period
trace_prop = 0.9, # Proportion of contacts traced
test_delay = 2, # Delay to tracing
trace_delay = 2, # Delay to tracing
p_tested = 0.8, # Probability index case isolated/tested
trace_adherence = 0.8, # Adherence of traced contacts to quarantine
dir_pick = paste0(out_dir,"runs_contacts/"))
n_run_pick <- 1e3 # model iterations
foreach(ii = limit_range) %dopar% {
for(jj in max_lim_children_vals){
offspring_model(max_low_fix = ii,
max_lim_children=jj,
range_n = c(5,6),
wfh_prob=0.25,
n_run = n_run_pick,
pre_inf = 2, # Pre-infectious period
trace_prop = 0.5, # Proportion of contacts traced
test_delay = 3, # Delay to testing
trace_delay = 2, # Delay to tracing
p_tested = 0.8, # Probability index case isolated/tested
trace_adherence = 0.5, # Adherence of traced contacts to quarantine
dir_pick = paste0(out_dir,"runs_contacts/",max_lim_children,"_"))
}
}
# - - - - - -
# Iterate over different limits on contacts and with/without limit on children
limit_range <- round(seq(1,10,1))
max_lim_children_vals <- c(T,F)
foreach(ii = limit_range) %dopar% {
for(jj in max_lim_children_vals){
offspring_model(max_low_fix = ii,
max_lim_children=jj,
range_n = c(5,6),
wfh_prob=0.25,
n_run = n_run_pick,
pre_inf = 2, # Pre-infectious period
trace_prop = 0.5, # Proportion of contacts traced
test_delay = 3, # Delay to testing
trace_delay = 2, # Delay to tracing
p_tested = 0.8, # Probability index case isolated/tested
trace_adherence = 0.5, # Adherence of traced contacts to quarantine
dir_pick = paste0(out_dir,"runs_contacts/",max_lim_children,"_"))
}
}
max_lim_children_vals
jj
# Iterate over different limits on contacts and with/without limit on children
limit_range <- round(seq(1,10,1))
max_lim_children_vals <- c(T,F)
foreach(ii = limit_range) %dopar% {
for(jj in max_lim_children_vals){
offspring_model(max_low_fix = ii,
max_lim_children=jj,
range_n = c(5,6),
wfh_prob=0.25,
n_run = n_run_pick,
pre_inf = 2, # Pre-infectious period
trace_prop = 0.5, # Proportion of contacts traced
test_delay = 3, # Delay to testing
trace_delay = 2, # Delay to tracing
p_tested = 0.8, # Probability index case isolated/tested
trace_adherence = 0.5, # Adherence of traced contacts to quarantine
dir_pick = paste0(out_dir,"runs_contacts/",max_lim_children,"_"))
}
}
max_lim_children_vals
# Iterate over different limits on contacts and with/without limit on children
limit_range <- round(seq(1,10,1))
max_lim_children_vals <- c(1,0)
foreach(ii = limit_range) %dopar% {
for(jj in max_lim_children_vals){
offspring_model(max_low_fix = ii,
max_lim_children=jj,
range_n = c(5,6),
wfh_prob=0.25,
n_run = n_run_pick,
pre_inf = 2, # Pre-infectious period
trace_prop = 0.5, # Proportion of contacts traced
test_delay = 3, # Delay to testing
trace_delay = 2, # Delay to tracing
p_tested = 0.8, # Probability index case isolated/tested
trace_adherence = 0.5, # Adherence of traced contacts to quarantine
dir_pick = paste0(out_dir,"runs_contacts/",max_lim_children,"_"))
}
}
foreach(ii = limit_range) %dopar% {
for(jj in max_lim_children_vals){
offspring_model(max_low_fix = ii,
max_lim_children=T,
range_n = c(5,6),
wfh_prob=0.25,
n_run = n_run_pick,
pre_inf = 2, # Pre-infectious period
trace_prop = 0.5, # Proportion of contacts traced
test_delay = 3, # Delay to testing
trace_delay = 2, # Delay to tracing
p_tested = 0.8, # Probability index case isolated/tested
trace_adherence = 0.5, # Adherence of traced contacts to quarantine
dir_pick = paste0(out_dir,"runs_contacts/",max_lim_children,"_"))
}
}
offspring_model
foreach(ii = limit_range) %dopar% {
for(jj in max_lim_children_vals){
offspring_model(max_low_fix = ii,
#max_lim_children=T,
range_n = c(5,6),
wfh_prob=0.25,
n_run = n_run_pick,
pre_inf = 2, # Pre-infectious period
trace_prop = 0.5, # Proportion of contacts traced
test_delay = 3, # Delay to testing
trace_delay = 2, # Delay to tracing
p_tested = 0.8, # Probability index case isolated/tested
trace_adherence = 0.5, # Adherence of traced contacts to quarantine
dir_pick = paste0(out_dir,"runs_contacts/",max_lim_children,"_"))
}
}
n_run_pick <- 1e3 # model iterations
set.seed(201)
# Load model functions
source("R/model_functions.R")
foreach(ii = limit_range) %dopar% {
for(jj in max_lim_children_vals){
offspring_model(max_low_fix = ii,
#max_lim_children=T,
range_n = c(5,6),
wfh_prob=0.25,
n_run = n_run_pick,
pre_inf = 2, # Pre-infectious period
trace_prop = 0.5, # Proportion of contacts traced
test_delay = 3, # Delay to testing
trace_delay = 2, # Delay to tracing
p_tested = 0.8, # Probability index case isolated/tested
trace_adherence = 0.5, # Adherence of traced contacts to quarantine
dir_pick = paste0(out_dir,"runs_contacts/",max_lim_children,"_"))
}
}
# Load model functions
source("R/model_functions.R")
foreach(ii = limit_range) %dopar% {
for(jj in max_lim_children_vals){
offspring_model(max_low_fix = ii,
#max_lim_children=T,
range_n = c(5,6),
wfh_prob=0.25,
n_run = 100, #n_run_pick,
pre_inf = 2, # Pre-infectious period
trace_prop = 0.5, # Proportion of contacts traced
test_delay = 3, # Delay to testing
trace_delay = 2, # Delay to tracing
p_tested = 0.8, # Probability index case isolated/tested
trace_adherence = 0.5, # Adherence of traced contacts to quarantine
dir_pick = paste0(out_dir,"runs_contacts/",max_lim_children,"_"))
}
}
source("R/model_functions.R")
foreach(ii = limit_range) %dopar% {
for(jj in max_lim_children_vals){
offspring_model(max_low_fix = ii,
#max_lim_children=T,
range_n = c(5,6),
wfh_prob=0.25,
n_run = 100, #n_run_pick,
pre_inf = 2, # Pre-infectious period
trace_prop = 0.5, # Proportion of contacts traced
test_delay = 3, # Delay to testing
trace_delay = 2, # Delay to tracing
p_tested = 0.8, # Probability index case isolated/tested
trace_adherence = 0.5, # Adherence of traced contacts to quarantine
dir_pick = paste0(out_dir,"runs_contacts/",max_lim_children,"_"))
}
}
source("R/model_functions.R")
foreach(ii = limit_range) %dopar% {
for(jj in max_lim_children_vals){
offspring_model(max_low_fix = ii,
#max_lim_children=T,
range_n = c(5,6),
wfh_prob=0.25,
n_run = 100, #n_run_pick,
pre_inf = 2, # Pre-infectious period
trace_prop = 0.5, # Proportion of contacts traced
test_delay = 3, # Delay to testing
trace_delay = 2, # Delay to tracing
p_tested = 0.8, # Probability index case isolated/tested
trace_adherence = 0.5, # Adherence of traced contacts to quarantine
dir_pick = paste0(out_dir,"runs_contacts/",max_lim_children,"_"))
}
}
getwd()
